name: Deploy infra

# Controls when the action will run. Triggers the workflow on push or pull request
on:
  workflow_dispatch:
  push:
    branches:
      [Develop]
    paths:
      - '.github/workflows/*'
      - ./*


permissions:
  id-token: write
  contents: read

jobs:     
  Init-terraform:
    name: Init Terraform for Azure resources
    runs-on: ubuntu-latest
    environment: Visual_Studio_Subscription

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.7

    - name: Terraform Init
      id: init
      run: terraform init
      shell: bash

    - name: Terraform Plan
      id: plan
      run: |
       terraform plan -input=false -no-color -out tf.plan
      shell: bash

    - name: Terraform Show
      id: show
      run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
      shell: bash

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
       github-token: ${{ inputs.GITHUB_TOKEN }}
       script: |
        const fs = require("fs");
        const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
        const maxGitHubBodyCharacters = 65536;

        function chunkSubstr(str, size) {
        const numChunks = Math.ceil(str.length / size)
        const chunks = new Array(numChunks)
        for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
          chunks[i] = str.substr(o, size)
        }
        return chunks
        }

        // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
        var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
        for (let i = 0; i < plans.length; i++) {
        const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
        #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
        #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
        #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
        <details><summary>Show Plan</summary>
        \`\`\`\n
        ${plans[i]}
        \`\`\`
        </details>
        *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

        await github.rest.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: output
        })
        }

  Apply-terraform:
    needs: Init-terraform
    name: Deploy Azure resources
    runs-on: ubuntu-latest
    environment: Visual_Studio_Subscription

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        shell: bash